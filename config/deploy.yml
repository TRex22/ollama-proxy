service: ollama-proxy
image: ollama-proxy

servers:
  web:
    hosts:
      - "<%= ENV['DEPLOY_HOST'] %>"

# Build locally and deploy directly to server
builder:
  arch: amd64

env:
  secret:
    - RAILS_MASTER_KEY
    - SECRET_KEY_BASE
  clear:
    RAILS_ENV: production
    RAILS_LOG_LEVEL: info
    RAILS_SERVE_STATIC_FILES: true
    RAILS_MAX_THREADS: 5
    WEB_CONCURRENCY: 2
    OLLAMA_PROXY_LOG_DIR: /app/log

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


volumes:
  - "/var/log/ollama-proxy:/app/log"
  - "ollama_proxy_storage:/rails/storage"

healthcheck:
  path: /health
  port: 3000
  max_attempts: 7
  interval: 20s
  timeout: 10s

# Pre-deployment hooks to setup Ollama servers
hooks:
  pre-deploy:
    - path: ./scripts/setup-ollama.sh
      host: all

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
