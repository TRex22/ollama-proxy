name: Security & Dependencies

on:
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'Gemfile'
      - 'Gemfile.lock'
  pull_request:
    paths:
      - 'Gemfile'
      - 'Gemfile.lock'

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run bundle audit
        run: |
          gem install bundler-audit
          bundle audit --update

      - name: Run Brakeman security scan
        run: |
          bin/brakeman --format json --output brakeman-report.json
        continue-on-error: true

      - name: Upload Brakeman report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: brakeman-security-report
          path: brakeman-report.json

      - name: Check for known CVEs in dependencies
        run: |
          # Additional security checks can be added here
          echo "Dependency security check completed"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update dependencies
        run: |
          bundle update --conservative
          
      - name: Run tests after update
        run: |
          bundle install
          bin/rails db:create db:migrate RAILS_ENV=test
          bundle exec rspec --fail-fast
          bin/rubocop

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated dependency updates'
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated dependency updates performed by GitHub Actions.
            
            ### Changes
            - Updated Ruby gems to latest compatible versions
            - All tests are passing
            - Security audit completed
            
            ### Testing
            - [x] RSpec test suite passes
            - [x] RuboCop linting passes
            - [x] Security audit clean
            
            Please review the changes and merge if everything looks good.
          branch: automated-dependency-updates
          delete-branch: true

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install license_finder
        run: gem install license_finder

      - name: Check licenses
        run: |
          license_finder --decisions-file .license_decisions.yml || true

      - name: Generate license report
        run: |
          license_finder report --format json > license-report.json

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: license-report.json

  performance-test:
    name: Performance Baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Setup test database
        env:
          RAILS_ENV: test
        run: |
          bin/rails db:create
          bin/rails db:migrate

      - name: Run performance tests
        env:
          RAILS_ENV: test
        run: |
          # Basic performance smoke test
          time bundle exec rspec --tag ~slow
          
          # Memory usage test
          echo "Testing memory usage..."
          timeout 30s bin/rails runner "
            puts 'Memory baseline test'
            GC.start
            puts 'Memory test completed'
          "

      - name: Boot time test
        env:
          RAILS_ENV: production
          SECRET_KEY_BASE: dummy_secret_for_testing
        run: |
          # Test application boot time
          echo "Testing application boot time..."
          time timeout 30s bin/rails runner "puts 'Boot time test completed'"
